@model Ping.Server.Controllers.TokenExchangeViewModel

<!DOCTYPE html>
<html>
<head>
    <title>Completing Sign In...</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f9fafb;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .container {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
            text-align: center;
        }
        keyframes spin {
            to

        {
            transform: rotate(360deg);
        }

        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #e5e7eb;
            border-top-color: #3b82f6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        .error {
            color: #ef4444;
            margin-top: 1rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="spinner"></div>
        <h1>Completing sign in...</h1>
        <p>Please wait while we set up your session.</p>
        <div id="error" class="error" style="display: none;"></div>
    </div>

    <script>
        (async function() {
            try {
                // Get return URL from the model or current URL params
                const returnUrl = '@Model.ReturnUrl' || new URLSearchParams(window.location.search).get('returnUrl');
                const magicToken = '@Model.MagicToken';

                if (!magicToken) {
                    throw new Error('No authentication token found');
                }

                // Prepare redirect URL with auth parameters
                const redirectUrl = new URL(returnUrl || 'https://ping.vera.fo/');
                redirectUrl.searchParams.set('magic_token', magicToken);
                redirectUrl.searchParams.set('email', '@Model.Email');

                // Redirect back to the React app with authentication info
                window.location.href = redirectUrl.toString();

            } catch (error) {
                console.error('Authentication error:', error);
                document.querySelector('.spinner').style.display = 'none';
                document.querySelector('h1').textContent = 'Sign-in failed';
                document.querySelector('p').textContent = 'There was an error completing your sign-in.';

                const errorDiv = document.getElementById('error');
                errorDiv.textContent = error.message;
                errorDiv.style.display = 'block';

                // Redirect to sign-in after delay
                setTimeout(() => {
                    window.location.href = '/auth/signin';
                }, 3000);
            }
        })();
    </script>
</body>
</html>